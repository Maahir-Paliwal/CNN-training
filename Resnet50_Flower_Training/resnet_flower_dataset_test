IMAGE_SIZE = [224,224]

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model 
from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
import numpy as np
from glob import glob 
import matplotlib.pyplot as plt 
import math


Train_folder = '/Users/maahirpaliwal/Downloads/Flower/output/train'
Validation_folder = '/Users/maahirpaliwal/Downloads/Flower/output/val'

myResnet = ResNet50(input_shape=IMAGE_SIZE + [3], weights = 'imagenet', include_top=False)


for layer in myResnet.layers:
    layer.trainable = False


classes = glob('/Users/maahirpaliwal/Downloads/Flower/output/train/*')
print(classes)

classesNum = len(classes)
print(classesNum)


PlusFlattenlayer = Flatten()(myResnet.output)

prediction = Dense(classesNum, activation='softmax')(PlusFlattenlayer)

#create a new model including resnet and added last layer
model = Model(inputs = myResnet.input, outputs = prediction)


model.compile(
    loss= 'categorical_crossentropy',
    optimizer = 'adam',
    metrics = ['accuracy']
)

train_datagen = ImageDataGenerator(rescale = 1. /255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)

val_datagen = ImageDataGenerator(rescale=1./ 255)

training_set = train_datagen.flow_from_directory(Train_folder, target_size=(224,224), batch_size= 32, class_mode='categorical')

val_set = val_datagen.flow_from_directory(Validation_folder, target_size=(224,224), batch_size= 32, class_mode='categorical')

STEP_SIZE_TRAIN = training_set.n / training_set.batch_size
STEP_SIZE_VALID = val_set.n / val_set.batch_size

result = model.fit(training_set, 
                   validation_data=val_set, 
                   epochs=10, 
                   steps_per_epoch = math.ceil(STEP_SIZE_TRAIN), 
                   validation_steps = math.ceil(STEP_SIZE_VALID))


print(STEP_SIZE_TRAIN)
print(STEP_SIZE_VALID)

plt.plot(result.history['accuracy'], label='train_acc')
plt.plot(result.history['val_accuracy'], label='val_acc')
plt.legend()
plt.show()

plt.plot(result.history['loss'], label='train_loss')
plt.plot(result.history['val_loss'], label='val_loss')
plt.legend()
plt.show()

model.save('/Users/maahirpaliwal/Downloads/Flower/myFlowerModel.h5')